{
  "ai": {
    "context": [
      "全てのエラー表示・警告は日本語で行い、ユーザー体験と分かりやすさに配慮すること。",
      "テストは Playwright（Chromium限定）によるE2Eテストと、ユニットテストの双方を実施し、変更内容に応じて必ず修正・追加すること。",
      "lintやtestのスキップは禁止。品質を損なう行為は厳禁とし、エラーは必ず修正してからコミット・マージすること。",
      "commitメッセージは日本語のConventional Commits形式（例: feat: 新規物件登録ページの追加）で記述し、内容ごとにコミットを分割すること。",
      "ブランチは `feature/機能名` や `fix/バグ名` の形式で命名し、各機能は独立ブランチで開発、レビュー後にsquashマージで統合する。",
      "PRはGitHub Flowに基づきPull Requestベースで進め、タスク管理はGitHub Issuesを用い、全ての開発はissueから始まりPRでクローズする（Issue駆動開発）。",
      "PR本文には必ず対応するissue番号（例: closes #番号）を記載し、マージ時に自動クローズされるようにすること。",
      "PR作成時はまずタイトルのみでPRを作成し、一時的なマークダウンファイルで本文を整備してから反映すること。コマンドラインで長文を直接入力しない。",
      "重要な設計方針や変更点は必ずREADMEまたはdocs配下に記録し、ドキュメントを常に最新に保つこと。",
      "コードには日本語コメントを適宜追加し、他の開発者が意図を理解しやすいようにすること。",
      "インラインスタイルや直接的なCSS記述を避け、デザインシステムやTailwindクラスを活用して一貫性を保つこと。例外的な場合を除きstyle属性は使わない。",
      "コミット前には必ず `git status` でステージング内容を確認し、不要なファイルや漏れがないか細心の注意を払うこと。",
      "プロダクト品質（コード、ユーザー体験、アクセシビリティ、パフォーマンス、セキュリティ等）は最優先事項とし、納期やスピードより優先する。妥協は許されない。",
      "迷った場合や不明点がある場合は、まずGitHubのissueやPR履歴をghコマンド等で参照し、独断で進めず必ず相談・確認すること。",
      "すべての開発作業・議論・決定事項はGitHub等の記録に残すこと。口頭や非公式なやり取りのみで進めることは禁止。",
      "個人情報や機密情報は絶対に公開リポジトリや外部サービスに流出させないこと。セキュリティとプライバシーを常に意識する。",
      "依存ライブラリやツールのバージョン管理は厳格に行い、互換性・再現性を担保すること。"
    ]
  }
}