/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/owners": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 所有者一覧を取得 */
        get: operations["listOwners"];
        put?: never;
        /** 所有者を作成 */
        post: operations["createOwner"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loans": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 借入一覧を取得 */
        get: operations["listLoans"];
        put?: never;
        /** 借入を作成 */
        post: operations["createLoan"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loans/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 借入詳細を取得 */
        get: operations["getLoan"];
        /** 借入を更新 */
        put: operations["updateLoan"];
        post?: never;
        /** 借入を削除（論理削除） */
        delete: operations["deleteLoan"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/properties": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 物件一覧を取得 */
        get: operations["listProperties"];
        put?: never;
        /** 物件を作成 */
        post: operations["createProperty"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/properties/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 物件詳細を取得 */
        get: operations["getProperty"];
        /** 物件を更新 */
        put: operations["updateProperty"];
        post?: never;
        /** 物件を削除（論理削除） */
        delete: operations["deleteProperty"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/expenses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 支出一覧を取得 */
        get: operations["listExpenses"];
        put?: never;
        /** 支出を作成 */
        post: operations["createExpense"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/expenses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** 支出詳細を取得 */
        get: operations["getExpense"];
        /** 支出を更新 */
        put: operations["updateExpense"];
        post?: never;
        /** 支出を削除（論理削除） */
        delete: operations["deleteExpense"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rent-rolls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** レントロール一覧を取得 */
        get: operations["listRentRolls"];
        put?: never;
        /** レントロールを作成 */
        post: operations["createRentRoll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rent-rolls/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** レントロール詳細を取得 */
        get: operations["getRentRoll"];
        /** レントロールを更新 */
        put: operations["updateRentRoll"];
        post?: never;
        /** レントロールを削除（論理削除） */
        delete: operations["deleteRentRoll"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ユーザー一覧を取得 */
        get: operations["listUsers"];
        put?: never;
        /** ユーザーを作成 */
        post: operations["createUser"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** ユーザー詳細を取得 */
        get: operations["getUser"];
        /** ユーザーを更新 */
        put: operations["updateUser"];
        post?: never;
        /** ユーザーを削除（論理削除） */
        delete: operations["deleteUser"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiError: {
            code: string;
            message: string;
            details?: unknown;
        };
        ErrorResponse: {
            /** @constant */
            success: false;
            data: null;
            error: components["schemas"]["ApiError"];
        };
        ApiMeta: {
            page?: number;
            limit?: number;
            total?: number;
            totalPages?: number;
        };
        ProblemDetails: {
            /** Format: uri */
            type?: string;
            title: string;
            status: number;
            detail?: string;
            instance?: string;
            code?: string;
        };
        Owner: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            user_id: string;
            name: string;
            /** @enum {string} */
            owner_kind: "individual" | "corporation";
            created_at: string;
            updated_at: string;
            deleted_at: string | null;
        };
        Loan: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            property_id?: string | null;
            /** Format: uuid */
            owner_id?: string | null;
            lender_name: string;
            branch_name?: string | null;
            /** @enum {string} */
            loan_type: "mortgage" | "business" | "personal" | "other";
            principal_amount: number;
            current_balance: number;
            interest_rate: number;
            loan_term_months: number;
            monthly_payment: number;
            notes?: string | null;
            created_at: string;
            updated_at: string;
            deleted_at: string | null;
        };
        Property: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            user_id: string;
            name: string;
            address: string;
            /** @enum {string} */
            property_type: "apartment" | "office" | "house" | "land" | "commercial" | "industrial" | "mixed_use" | "other";
            purchase_price: number;
            purchase_date: string;
            current_valuation: number | null;
            created_at: string;
            updated_at: string;
            deleted_at: string | null;
        };
        Expense: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            property_id: string;
            expense_date: string;
            /** @enum {string} */
            category: "management_fee" | "repair_cost" | "utility" | "insurance" | "tax" | "other";
            amount: number;
            vendor: string | null;
            description: string | null;
            receipt_url: string | null;
            is_recurring: boolean;
            recurring_frequency: string | null;
            created_at: string;
            updated_at: string;
            deleted_at: string | null;
        };
        RentRoll: {
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            property_id: string;
            room_number: string;
            tenant_name?: string | null;
            monthly_rent?: number | null;
            /** @enum {string} */
            occupancy_status: "occupied" | "vacant" | "reserved";
            lease_start_date?: string | null;
            lease_end_date?: string | null;
            security_deposit?: number | null;
            key_money?: number | null;
            notes?: string | null;
            created_at: string;
            updated_at: string;
            deleted_at?: string | null;
        };
        User: {
            /** Format: uuid */
            id: string;
            /** Format: email */
            email: string;
            name: string;
            /** @enum {string} */
            role: "admin" | "owner" | "manager" | "viewer" | "auditor";
            timezone: string;
            language: string;
            created_at: string;
            updated_at: string;
        };
    };
    responses: {
        /** @description 認証エラー */
        Unauthorized: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["ProblemDetails"];
            };
        };
        /** @description バリデーションエラー */
        ValidationError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["ProblemDetails"];
            };
        };
        /** @description 対象が見つかりません */
        NotFound: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["ProblemDetails"];
            };
        };
        /** @description 不正なリクエスト */
        BadRequest: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["ProblemDetails"];
            };
        };
        /** @description サーバ内部エラー */
        InternalError: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/problem+json": components["schemas"]["ProblemDetails"];
            };
        };
    };
    parameters: {
        /** @description ページ番号（1始まり） */
        PageParam: number;
        /** @description 1ページあたり件数 */
        LimitParam: number;
        /** @description 検索キーワード（リソースにより適用対象は異なる） */
        SearchParam: string;
        /** @description ソートキー（リソースに依存） */
        SortParam: string;
        /** @description ソート順（asc/desc） */
        OrderParam: "asc" | "desc";
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listOwners: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Owner"][];
                };
            };
            401: components["responses"]["Unauthorized"];
        };
    };
    createOwner: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    /**
                     * @default individual
                     * @enum {string}
                     */
                    owner_kind?: "individual" | "corporation";
                };
            };
        };
        responses: {
            /** @description 作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Owner"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            422: components["responses"]["ValidationError"];
        };
    };
    listLoans: {
        parameters: {
            query?: {
                /** @description ページ番号（1始まり） */
                page?: components["parameters"]["PageParam"];
                /** @description 1ページあたり件数 */
                limit?: components["parameters"]["LimitParam"];
                property_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    createLoan: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    property_id?: string;
                    /** Format: uuid */
                    owner_id?: string;
                    lender_name: string;
                    branch_name?: string;
                    /** @enum {string} */
                    loan_type: "mortgage" | "business" | "personal" | "other";
                    principal_amount: number;
                    current_balance: number;
                    interest_rate: number;
                    loan_term_months: number;
                    monthly_payment: number;
                    notes?: string;
                };
            };
        };
        responses: {
            /** @description 作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            422: components["responses"]["ValidationError"];
        };
    };
    getLoan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    updateLoan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    lender_name?: string;
                    branch_name?: string;
                    /** @enum {string} */
                    loan_type?: "mortgage" | "business" | "personal" | "other";
                    /** Format: uuid */
                    owner_id?: string;
                    current_balance?: number;
                    interest_rate?: number;
                    monthly_payment?: number;
                    notes?: string;
                };
            };
        };
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Loan"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            422: components["responses"]["ValidationError"];
        };
    };
    deleteLoan: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 削除完了 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    listProperties: {
        parameters: {
            query?: {
                /** @description ページ番号（1始まり） */
                page?: components["parameters"]["PageParam"];
                /** @description 1ページあたり件数 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 検索キーワード（リソースにより適用対象は異なる） */
                search?: components["parameters"]["SearchParam"];
                property_type?: "apartment" | "office" | "house" | "land" | "commercial" | "industrial" | "mixed_use" | "other";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Property"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            422: components["responses"]["ValidationError"];
        };
    };
    createProperty: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name: string;
                    address: string;
                    /** @enum {string} */
                    property_type: "apartment" | "office" | "house" | "land" | "commercial" | "industrial" | "mixed_use" | "other";
                    purchase_price: number;
                    purchase_date: string;
                    current_valuation?: number;
                };
            };
        };
        responses: {
            /** @description 作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Property"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            422: components["responses"]["ValidationError"];
        };
    };
    getProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Property"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    updateProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    name?: string;
                    address?: string;
                    /** @enum {string} */
                    property_type?: "apartment" | "office" | "house" | "land" | "commercial" | "industrial" | "mixed_use" | "other";
                    purchase_price?: number;
                    purchase_date?: string;
                    current_valuation?: number | null;
                };
            };
        };
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Property"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            422: components["responses"]["ValidationError"];
        };
    };
    deleteProperty: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 削除完了 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    listExpenses: {
        parameters: {
            query?: {
                /** @description ページ番号（1始まり） */
                page?: components["parameters"]["PageParam"];
                /** @description 1ページあたり件数 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 検索キーワード（リソースにより適用対象は異なる） */
                search?: components["parameters"]["SearchParam"];
                property_id?: string;
                category?: string;
                start_date?: string;
                end_date?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Expense"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    createExpense: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    property_id: string;
                    /** Format: date-time */
                    expense_date: string;
                    /** @enum {string} */
                    category: "management_fee" | "repair_cost" | "utility" | "insurance" | "tax" | "other";
                    amount: number;
                    vendor?: string | null;
                    description?: string | null;
                    /** Format: uri */
                    receipt_url?: string | null;
                    /** @default false */
                    is_recurring?: boolean;
                    /** @enum {string|null} */
                    recurring_frequency?: "monthly" | "quarterly" | "annually" | null;
                };
            };
        };
        responses: {
            /** @description 作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Expense"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            422: components["responses"]["ValidationError"];
        };
    };
    getExpense: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Expense"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    updateExpense: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    property_id?: string;
                    /** Format: date-time */
                    expense_date?: string;
                    /** @enum {string} */
                    category?: "management_fee" | "repair_cost" | "utility" | "insurance" | "tax" | "other";
                    amount?: number;
                    vendor?: string | null;
                    description?: string | null;
                    /** Format: uri */
                    receipt_url?: string | null;
                    /** @default false */
                    is_recurring?: boolean;
                    /** @enum {string|null} */
                    recurring_frequency?: "monthly" | "quarterly" | "annually" | null;
                };
            };
        };
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Expense"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            422: components["responses"]["ValidationError"];
        };
    };
    deleteExpense: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 削除完了 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    listRentRolls: {
        parameters: {
            query?: {
                /** @description ページ番号（1始まり） */
                page?: components["parameters"]["PageParam"];
                /** @description 1ページあたり件数 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 検索キーワード（リソースにより適用対象は異なる） */
                search?: components["parameters"]["SearchParam"];
                property_id?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentRoll"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    createRentRoll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: uuid */
                    property_id: string;
                    room_number: string;
                    tenant_name?: string | null;
                    monthly_rent?: number | null;
                    /** @enum {string} */
                    occupancy_status: "occupied" | "vacant" | "reserved";
                    /** Format: date-time */
                    lease_start_date?: string | null;
                    /** Format: date-time */
                    lease_end_date?: string | null;
                    security_deposit?: number | null;
                    key_money?: number | null;
                    notes?: string | null;
                };
            };
        };
        responses: {
            /** @description 作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentRoll"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            422: components["responses"]["ValidationError"];
        };
    };
    getRentRoll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentRoll"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    updateRentRoll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    room_number?: string;
                    tenant_name?: string | null;
                    monthly_rent?: number;
                    /** @enum {string} */
                    occupancy_status?: "occupied" | "vacant" | "reserved";
                    /** Format: date-time */
                    lease_start_date?: string | null;
                    /** Format: date-time */
                    lease_end_date?: string | null;
                    security_deposit?: number | null;
                    key_money?: number | null;
                    notes?: string | null;
                };
            };
        };
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RentRoll"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            422: components["responses"]["ValidationError"];
        };
    };
    deleteRentRoll: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 削除完了 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    listUsers: {
        parameters: {
            query?: {
                /** @description ページ番号（1始まり） */
                page?: components["parameters"]["PageParam"];
                /** @description 1ページあたり件数 */
                limit?: components["parameters"]["LimitParam"];
                /** @description 検索キーワード（リソースにより適用対象は異なる） */
                search?: components["parameters"]["SearchParam"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"][];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
        };
    };
    createUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: email */
                    email: string;
                    name: string;
                    /**
                     * @default viewer
                     * @enum {string}
                     */
                    role?: "admin" | "owner" | "manager" | "viewer" | "auditor";
                    password: string;
                };
            };
        };
        responses: {
            /** @description 作成成功 */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            422: components["responses"]["ValidationError"];
        };
    };
    getUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
    updateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** Format: email */
                    email?: string;
                    name?: string;
                    /** @enum {string} */
                    role?: "admin" | "owner" | "manager" | "viewer" | "auditor";
                    timezone?: string;
                    /** @enum {string} */
                    language?: "ja" | "en";
                };
            };
        };
        responses: {
            /** @description 成功 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
            422: components["responses"]["ValidationError"];
        };
    };
    deleteUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description 削除完了 */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            400: components["responses"]["BadRequest"];
            401: components["responses"]["Unauthorized"];
            404: components["responses"]["NotFound"];
        };
    };
}
